/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/adm/rs/accounts-manager/guests/accounts/{account_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Guest a user to work on account.
         * @description This action gives the ability of the target account (specified through
         *     the `account` argument) to perform actions specified in the `role`
         *     path argument.
         */
        post: operations["guest_to_children_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my account details
         * @description Get the details of the account associated with the current user.
         */
        get: operations["get_my_account_details_url"];
        put?: never;
        /**
         * Create a user related account
         * @description A user related account is an account that is created for a physical person.
         *
         *
         */
        post: operations["create_default_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete my account
         * @description Delete the account associated with the current user.
         *
         *
         */
        delete: operations["delete_my_account_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/accounts/{account_id}/update-account-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update account name
         * @description Update the account name of the account owner.
         *
         *
         */
        patch: operations["update_own_account_name_url"];
        trace?: never;
    };
    "/adm/rs/beginners/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a account metadata */
        put: operations["update_account_meta_url"];
        /** Register a account metadata */
        post: operations["create_account_meta_url"];
        /** Delete a account metadata */
        delete: operations["delete_account_meta_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a user's profile. */
        get: operations["fetch_profile_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/tenants/{tenant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a user's profile. */
        get: operations["fetch_tenant_public_info_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Connection String
         * @description This action creates a connection string that is associated with the user
         *     account. The connection string has the same permissions of the user account.
         *
         *
         */
        post: operations["create_connection_string_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register user
         * @description This route should be used to register a new user. If the Bearer token is
         *     included in the request, the user will be registered with the provider
         *     informed in the token. Otherwise, the password is required.
         *
         *
         */
        post: operations["create_default_user_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login with email and password
         * @description This route should be used to login with email and password. If the user has
         *     enabled the TOTP app, the user will be redirected to the TOTP activation
         *     route.
         *
         *
         */
        post: operations["check_email_password_validity_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check token and reset password
         * @description This route should be used to check the token and reset the password.
         *
         *
         */
        post: operations["check_token_and_reset_password_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/start-password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start password redefinition
         * @description This route should be used to start the password redefinition process.
         *
         *
         */
        post: operations["start_password_redefinition_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * DEPRECATED: Check email status
         * @description This endpoint is deprecated. Please use the /status endpoint instead.
         *
         *
         *
         *
         */
        get: operations["check_email_registration_status_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/totp/check-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check TOTP token
         * @description This route should be used to check the TOTP token when tht totp app is
         *     enabled.
         *
         *
         */
        post: operations["totp_check_token_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/totp/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable TOTP
         * @description This route should be used to disable the TOTP app.
         *
         *
         */
        post: operations["totp_disable_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/totp/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable TOTP
         * @description This route should be used to enable the TOTP app. Before enabling the TOTP
         *     the user must be authenticated using the `/login/` route.
         *
         *
         */
        post: operations["totp_start_activation_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/totp/validate-app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate TOTP app
         * @description This route should be used to validate the TOTP app after enabling it.
         *
         *
         */
        post: operations["totp_finish_activation_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/beginners/users/validate-activation-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check token and activate user
         * @description This route should be used to check the token and activate the user.
         *
         *
         */
        post: operations["check_user_token_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/gateway-manager/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List routes by service
         * @description This function is restricted to the GatewayManager users. List routes by
         *     service name or service id.
         *
         *
         */
        get: operations["list_routes_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/gateway-manager/services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List routes by service
         * @description This function is restricted to the GatewayManager users. List routes by
         *     service name or service id.
         *
         *
         */
        get: operations["list_services_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/gateway-manager/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List routes by service
         * @description This function is restricted to the GatewayManager users. List routes by
         *     service name or service id.
         *
         *
         */
        get: operations["list_operations_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/guests-manager/guest-roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Roles */
        get: operations["list_guest_roles_url"];
        put?: never;
        /**
         * Create Guest Role
         * @description Guest Roles provide permissions to simple Roles.
         */
        post: operations["crate_guest_role_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Guest Role
         * @description Delete a single guest role.
         */
        delete: operations["delete_guest_role_url"];
        options?: never;
        head?: never;
        /**
         * Partial Update Guest Role
         * @description Update name and description of a single Guest Role.
         */
        patch: operations["update_guest_role_name_and_description_url"];
        trace?: never;
    };
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}/children/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Child Role
         * @description Insert a child role to a parent role.
         */
        post: operations["insert_role_child_url"];
        /**
         * Delete Child Role
         * @description Delete a child role to a parent role.
         */
        delete: operations["remove_role_child_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/guests-manager/guest-roles/{guest_role_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change permissions of Guest Role
         * @description Upgrade or Downgrade permissions of Guest Role.
         */
        patch: operations["update_guest_role_permissions_url"];
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account given an account-type
         * @description Get a filtered (or not) list of accounts.
         *
         *     List accounts with pagination. The `records` field contains a vector of
         *     `Account` model.
         *
         *
         */
        get: operations["list_accounts_by_type_url"];
        put?: never;
        /**
         * Create Subscription Account
         * @description Subscription accounts represents shared entities, like institutions,
         *     groups, but not real persons.
         */
        post: operations["create_subscription_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subscription Account
         * @description Get a single subscription account.
         */
        get: operations["get_account_details_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Subscription Account Name and Flags
         * @description Subscription accounts represents shared entities, like institutions,
         *     groups, but not real persons.
         */
        patch: operations["update_account_name_and_flags_url"];
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/accounts/{account_id}/propagate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Propagate Subscription Account
         * @description Propagate a single subscription account.
         */
        post: operations["propagate_existing_subscription_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/guest-roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Roles */
        get: operations["list_guest_roles_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/guest-roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch Guest Role Details */
        get: operations["fetch_guest_role_details_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/guests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscription accounts which email was guest */
        get: operations["list_licensed_accounts_of_email_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/guests/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List guest accounts related to a subscription account
         * @description This action fetches all non-subscription accounts related to the
         *     informed subscription account.
         */
        get: operations["list_guest_on_subscription_account_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/guests/accounts/{account_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Guest a user to work on account.
         * @description This action gives the ability of the target account (specified through
         *     the `account` argument) to perform actions specified in the `role`
         *     path argument.
         */
        post: operations["guest_user_url"];
        /** Uninvite user to perform a role to account */
        delete: operations["uninvite_guest_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a tag */
        post: operations["register_account_tag_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/subscriptions-manager/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a tag */
        put: operations["update_account_tag_url"];
        post?: never;
        /** Delete a tag */
        delete: operations["delete_account_tag_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/system-manager/error-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available error codes.
         * @description List accounts with pagination. The `records` field contains a vector of
         *     `ErrorCode` model.
         *
         *
         */
        get: operations["list_error_codes_url"];
        put?: never;
        /**
         * Register a new error code.
         * @description This action is restricted to manager users.
         */
        post: operations["register_error_code_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/system-manager/error-codes/prefixes/{prefix}/codes/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an error code.
         * @description Get error code by prefix and code.
         *
         *
         */
        get: operations["get_error_code_url"];
        put?: never;
        post?: never;
        /**
         * Delete an error code.
         * @description Delete error code by prefix and code.
         *
         *
         */
        delete: operations["delete_error_code_url"];
        options?: never;
        head?: never;
        /**
         * Update an error code.
         * @description Update error code message and details.
         *
         *
         */
        patch: operations["update_error_code_message_and_details_url"];
        trace?: never;
    };
    "/adm/rs/system-manager/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List webhooks */
        get: operations["list_webhooks_url"];
        put?: never;
        /** Create a webhook */
        post: operations["crate_webhook_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/system-manager/webhooks/{webhook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a webhook */
        delete: operations["delete_webhook_url"];
        options?: never;
        head?: never;
        /** Update a webhook */
        patch: operations["update_webhook_url"];
        trace?: never;
    };
    "/adm/rs/tenant-manager/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a subscription manager account
         * @description This action is restricted to tenant managers. This action will create a
         *     tenant-related subscription manager account.
         *
         *
         */
        post: operations["create_subscription_manager_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a subscription account
         * @description This action is restricted to tenant managers.
         *
         *
         */
        delete: operations["delete_subscription_account_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/guests/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Guest a user to work on account.
         * @description This action gives the ability of the target account (specified through
         *     the `account` argument) to perform actions specified in the `role`
         *     path argument.
         */
        post: operations["guest_user_to_subscription_manager_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/guests/accounts/{account_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Uninvite user to perform a role to account */
        delete: operations["revoke_user_guest_to_subscription_manager_account_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a tag */
        post: operations["register_tenant_tag_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a tag */
        put: operations["update_tenant_tag_url"];
        post?: never;
        /** Delete a tag */
        delete: operations["delete_tenant_tag_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-manager/tenants/{tenant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch a tenant's details */
        get: operations["get_tenant_details_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-owner/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a management account
         * @description Management accounts are used to manage tenant resources. Tenant managers
         *     should manage subscription accounts.
         *
         *
         */
        post: operations["create_management_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-owner/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a tenant manager account
         * @description This action will soft delete the tenant manager account.
         *
         *
         */
        delete: operations["delete_tenant_manager_account_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-owner/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a tenant metadata */
        post: operations["create_tenant_meta_url"];
        /** Delete a tenant metadata */
        delete: operations["delete_tenant_meta_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-owner/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Guest a user to work as a tenant owner */
        post: operations["guest_tenant_owner_url"];
        /** Revoke a user from working as a tenant owner */
        delete: operations["revoke_tenant_owner_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/rs/tenant-owner/tenants/{tenant_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the name and description of a tenant */
        patch: operations["update_tenant_name_and_description_url"];
        trace?: never;
    };
    "/adm/rs/tenant-owner/tenants/{tenant_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Include an archive status to a tenant */
        patch: operations["update_tenant_archiving_status_url"];
        trace?: never;
    };
    "/adm/rs/tenant-owner/tenants/{tenant_id}/trash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Include a trash status to a tenant */
        patch: operations["update_tenant_trashing_status_url"];
        trace?: never;
    };
    "/adm/rs/tenant-owner/tenants/{tenant_id}/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Include a verified status to a tenant */
        patch: operations["update_tenant_verifying_status_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Activate account
         * @description Any account could be activated and deactivated. This action turn an
         *     account active.
         */
        patch: operations["activate_account_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Approve account after creation
         * @description New accounts should be approved after has permissions to perform
         *     operation on the system. These endpoint should approve such account.
         */
        patch: operations["approve_account_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Archive account
         * @description Set target account as archived.
         */
        patch: operations["archive_account_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate account
         * @description Any account could be activated and deactivated. This action turn an
         *     account deactivated.
         */
        patch: operations["deactivate_account_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/disapprove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Disapprove account after creation
         * @description Also approved account should be disapproved at any time. These endpoint
         *     work for this.
         */
        patch: operations["disapprove_account_url"];
        trace?: never;
    };
    "/adm/rs/users-manager/accounts/{account_id}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Unarchive account
         * @description Set target account as un-archived.
         */
        patch: operations["unarchive_account_url"];
        trace?: never;
    };
    "/adm/su/managers/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create system account */
        post: operations["create_system_account_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/su/managers/guest-roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create system roles
         * @description System roles should be used to attribute permissions to actors who manage
         *     specific parts of the system. This function creates the following roles:
         *
         *     - Subscriptions Manager
         *     - Users Manager
         *     - Account Manager
         *     - Guest Manager
         *     - Gateway Manager
         *     - System Manager
         *     - Tenant Manager
         *
         *
         */
        post: operations["create_system_roles_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/su/managers/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tenants */
        get: operations["list_tenant_url"];
        put?: never;
        /** Create a new tenant */
        post: operations["create_tenant_url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/su/managers/tenants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a tenant */
        delete: operations["delete_tenant_url"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/adm/su/managers/tenants/{id}/owner/{owner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Exclude a tenant owner
         * @description A single tenant can have multiple owners. This endpoint allows to exclude an
         *     owner from the tenant.
         *
         *
         */
        delete: operations["exclude_tenant_owner_url"];
        options?: never;
        head?: never;
        /**
         * Include a tenant owner
         * @description A single tenant can have multiple owners. This endpoint allows to include a
         *     new owner to the tenant.
         *
         *
         */
        patch: operations["include_tenant_owner_url"];
        trace?: never;
    };
    "/adm/su/staffs/accounts/{account_id}/downgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Downgrade account privileges
         * @description Decrease permissions of the refereed account.
         */
        patch: operations["downgrade_account_privileges_url"];
        trace?: never;
    };
    "/adm/su/staffs/accounts/{account_id}/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Upgrade account privileges
         * @description Increase permissions of the refereed account.
         */
        patch: operations["upgrade_account_privileges_url"];
        trace?: never;
    };
    "/adm/svc/tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List routes by service
         * @description This function is restricted to the GatewayManager users. List routes by
         *     service name or service id.
         *
         *
         */
        get: operations["list_discoverable_services_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Provide a health check endpoint.
         * @description If the server is running it returns a 200 response with a JSON body
         *     containing the success message.
         */
        get: operations["health_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/now": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Provide a datetime with the server's timezone.
         * @description This is usual during system checks.
         */
        get: operations["now_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        APIAccountType: "staff" | "manager" | "user" | "subscription" | "actorAssociated" | "tenantManager";
        Account: {
            /**
             * Format: uuid
             * @description The Account ID
             */
            id?: string | null;
            /** @description The Account Name */
            name: string;
            /** @description The Account Slug
             *
             *     This is generated from the account name. This is used for programmatic
             *     access and verification of the account.
             *      */
            slug: string;
            /** @description Account Tags
             *
             *     Information about the account. This is used for categorizing and filter
             *     account.
             *      */
            tags?: components["schemas"]["Tag"][] | null;
            /** @description Account is active
             *
             *     If the account is active. This is used for logic trash and restore
             *     account.
             *      */
            isActive: boolean;
            /** @description Account is checked
             *
             *     If the account was verified by a human. This is used for account
             *     verification.
             *      */
            isChecked: boolean;
            /** @description Account is archived
             *
             *     If the account is archived. This is used for account archiving.
             *      */
            isArchived: boolean;
            /** @description Account is deleted
             *
             *     If the account is deleted. This is used for logic trash and restore
             *     account.
             *      */
            isDeleted: boolean;
            verboseStatus?: null | components["schemas"]["VerboseStatus"];
            isDefault: boolean;
            /** @description The Account Owners
             *
             *     This is the list of account owners. The account owners are the users who
             *     have the account owner role. */
            owners: components["schemas"]["Children_User_String"];
            /** @description The Account Type
             *
             *     Account type is the type of the account. The account type is used to
             *     categorize the account. */
            accountType: components["schemas"]["AccountType"];
            guestUsers?: null | components["schemas"]["Children_GuestUser_String"];
            /**
             * Format: date-time
             * @description The Account Created Date
             */
            createdAt: string;
            createdBy?: null | components["schemas"]["WrittenBy"];
            /**
             * Format: date-time
             * @description The Account Updated Date
             */
            updatedAt?: string | null;
            updatedBy?: null | components["schemas"]["WrittenBy"];
            /** @description The Account Meta
             *
             *     Store metadata about the account.
             *      */
            meta?: {
                [key: string]: string;
            } | null;
        };
        AccountType: "staff" | "manager" | "user" | {
            /** @description Subscription account type
             *
             *     A subscription account is a special account type that is used to
             *     represent legal entities that have a subscription to the service. */
            subscription: {
                /** Format: uuid */
                tenantId: string;
            };
        } | {
            /** @description Role associated account type
             *
             *     Role associated account type is an special type of account, created to
             *     connect users to a specific standard role in the application. */
            roleAssociated: {
                /**
                 * Format: uuid
                 * @description The tenant ID
                 */
                tenantId: string;
                /** @description The role name
                 *
                 *     The role name should be the same for the read and write roles.
                 *      */
                roleName: string;
                /**
                 * Format: uuid
                 * @description The read role ID
                 *
                 *     The read role ID is the ID of the role that will be used to read the
                 *     data from the account.
                 *
                 */
                readRoleId: string;
                /**
                 * Format: uuid
                 * @description The write role ID
                 *
                 *     The write role ID is the ID of the role that will be used to write
                 *     the data to the account.
                 *
                 */
                writeRoleId: string;
            };
        } | {
            /** @description Actor associated account type */
            actorAssociated: {
                actor: components["schemas"]["SystemActor"];
            };
        } | {
            /** @description Tenant manager account type */
            tenantManager: {
                /** Format: uuid */
                tenantId: string;
            };
        };
        /** @enum {string} */
        ApiSystemActor: "gatewayManager" | "guestsManager" | "systemManager";
        CheckTokenBody: {
            token: string;
            email: string;
        };
        CheckUserCredentialsBody: {
            email: string;
            password: string;
        };
        /** @description A children record
         *
         *     This enumerator allow represents the children elements using their primary
         *     keys (Ids option) or the true records (Record option). */
        Children_Account_String: {
            records: {
                /**
                 * Format: uuid
                 * @description The Account ID
                 */
                id?: string | null;
                /** @description The Account Name */
                name: string;
                /** @description The Account Slug
                 *
                 *     This is generated from the account name. This is used for programmatic
                 *     access and verification of the account.
                 *      */
                slug: string;
                /** @description Account Tags
                 *
                 *     Information about the account. This is used for categorizing and filter
                 *     account.
                 *      */
                tags?: components["schemas"]["Tag"][] | null;
                /** @description Account is active
                 *
                 *     If the account is active. This is used for logic trash and restore
                 *     account.
                 *      */
                isActive: boolean;
                /** @description Account is checked
                 *
                 *     If the account was verified by a human. This is used for account
                 *     verification.
                 *      */
                isChecked: boolean;
                /** @description Account is archived
                 *
                 *     If the account is archived. This is used for account archiving.
                 *      */
                isArchived: boolean;
                /** @description Account is deleted
                 *
                 *     If the account is deleted. This is used for logic trash and restore
                 *     account.
                 *      */
                isDeleted: boolean;
                verboseStatus?: null | components["schemas"]["VerboseStatus"];
                isDefault: boolean;
                /** @description The Account Owners
                 *
                 *     This is the list of account owners. The account owners are the users who
                 *     have the account owner role. */
                owners: components["schemas"]["Children_User_String"];
                /** @description The Account Type
                 *
                 *     Account type is the type of the account. The account type is used to
                 *     categorize the account. */
                accountType: components["schemas"]["AccountType"];
                guestUsers?: null | components["schemas"]["Children_GuestUser_String"];
                /**
                 * Format: date-time
                 * @description The Account Created Date
                 */
                createdAt: string;
                createdBy?: null | components["schemas"]["WrittenBy"];
                /**
                 * Format: date-time
                 * @description The Account Updated Date
                 */
                updatedAt?: string | null;
                updatedBy?: null | components["schemas"]["WrittenBy"];
                /** @description The Account Meta
                 *
                 *     Store metadata about the account.
                 *      */
                meta?: {
                    [key: string]: string;
                } | null;
            }[];
        } | {
            ids: string[];
        };
        /** @description A children record
         *
         *     This enumerator allow represents the children elements using their primary
         *     keys (Ids option) or the true records (Record option). */
        Children_GuestRole_String: {
            records: {
                /** Format: uuid */
                id?: string | null;
                name: string;
                slug: string;
                description?: string | null;
                permission: components["schemas"]["Permission"];
                /**
                 * Format: date-time
                 * @description The date and time the role was created
                 */
                created: string;
                /**
                 * Format: date-time
                 * @description The date and time the role was last updated
                 */
                updated?: string | null;
                /** @description If it is a system role
                 *
                 *     System roles represents standard core actors of the Mycelium API
                 *     Gateway, defined in `SystemActor`
                 *      */
                system: boolean;
                children?: null | components["schemas"]["Children_GuestRole_String"];
            }[];
        } | {
            ids: string[];
        };
        /** @description A children record
         *
         *     This enumerator allow represents the children elements using their primary
         *     keys (Ids option) or the true records (Record option). */
        Children_GuestUser_String: {
            records: {
                /**
                 * Format: uuid
                 * @description The guest user id
                 */
                id?: string | null;
                /** @description The guest user email
                 *
                 *     The email is used to identify the guest user connection with the target
                 *     account.
                 *      */
                email: components["schemas"]["Email"];
                /** @description The guest user role */
                guestRole: components["schemas"]["Parent_GuestRole_String"];
                /**
                 * Format: date-time
                 * @description The guesting date
                 */
                created: string;
                /**
                 * Format: date-time
                 * @description The last updated date
                 */
                updated?: string | null;
                accounts?: null | components["schemas"]["Children_Account_String"];
                /** @description The guest user is verified
                 *
                 *     WHile the user is not verified, the user will not be able to access
                 *     the account.
                 *      */
                wasVerified: boolean;
            }[];
        } | {
            ids: string[];
        };
        /** @description A children record
         *
         *     This enumerator allow represents the children elements using their primary
         *     keys (Ids option) or the true records (Record option). */
        Children_Owner_String: {
            records: {
                /** Format: uuid */
                id: string;
                /** @description The owner email
                 *
                 *     The email of the user that administrate the profile. Email denotes the
                 *     central part of the profile management. Email should be used to collect
                 *     licensed IDs and perform guest operations. Thus, it should be unique in
                 *     the Mycelium platform. */
                email: string;
                /** @description The owner first name */
                firstName?: string | null;
                /** @description The owner last name */
                lastName?: string | null;
                /** @description The owner username */
                username?: string | null;
                /** @description If the owner is the principal account owner */
                isPrincipal: boolean;
            }[];
        } | {
            ids: string[];
        };
        /** @description A children record
         *
         *     This enumerator allow represents the children elements using their primary
         *     keys (Ids option) or the true records (Record option). */
        Children_User_String: {
            records: {
                /** Format: uuid */
                id?: string | null;
                username: string;
                email: components["schemas"]["Email"];
                firstName?: string | null;
                lastName?: string | null;
                isActive: boolean;
                /** Format: date-time */
                created: string;
                /** Format: date-time */
                updated?: string | null;
                account?: null | components["schemas"]["Parent_Account_String"];
                /** @description If the user is the principal user of the account.
                 *
                 *     The principal user contains information of the first email that created
                 *     the account. This information is used to send emails to the principal
                 *     user.
                 *
                 *     Principal users should not be deleted or deactivated if the account has
                 *     other users connected.
                 *      */
                isPrincipal: boolean;
                provider?: null | components["schemas"]["Provider"];
                /** @description The user TOTP
                 *
                 *     When enabled the user has verified the TOTP and the auth url is set.
                 *      */
                mfa: components["schemas"]["MultiFactorAuthentication"];
            }[];
        } | {
            ids: string[];
        };
        /** @description Content Schema
         *
         *     Should used to represent the content of the response.
         *
         *     Example:
         *
         *     ```json
         *     {
         *         "content": {
         *             "application/json": {
         *                 "schema": {
         *                     "type": "object"
         *                     "properties": {
         *                         "name": {
         *                             "type": "string"
         *                         }
         *                     }
         *                 }
         *             }
         *         },
         *         "description": "The response content",
         *         "required": true
         *     }
         *     ```
         *
         *     or, using a reference to a schema:
         *
         *     ```json
         *     {
         *         "content": {
         *             "application/json": {
         *                 "schema": {
         *                     "$ref": "#/components/schemas/HttpJsonResponse"
         *                 }
         *             }
         *         },
         *         "description": "The response content",
         *         "required": true
         *     }
         *     ```
         *
         *     This struct refers to the value of the schema in response.
         *      */
        Content: {
            content?: {
                [key: string]: components["schemas"]["ValueSchema"];
            } | null;
            description?: string | null;
            required?: boolean | null;
        };
        CreateAccountMetaBody: {
            key: string;
            value: string;
        };
        CreateAccountTagBody: {
            /** Format: uuid */
            accountId: string;
            value: string;
            meta: {
                [key: string]: string;
            };
        };
        CreateDefaultAccountBody: {
            name: string;
        };
        CreateDefaultUserBody: {
            email: string;
            firstName?: string | null;
            lastName?: string | null;
            password?: string | null;
        };
        CreateErrorCodeBody: {
            prefix: string;
            message: string;
            details?: string | null;
            isInternal: boolean;
        };
        CreateGuestRoleBody: {
            name: string;
            description: string;
            permission?: null | components["schemas"]["Permission"];
            system: boolean;
        };
        CreateRoleAssociatedAccountBody: {
            roleName: string;
            roleDescription: string;
        };
        CreateSubscriptionAccountBody: {
            name: string;
        };
        CreateSystemSubscriptionAccountBody: {
            /** @description The account name */
            name: string;
            /** @description The role ID */
            actor: components["schemas"]["ApiSystemActor"];
        };
        CreateTagBody: {
            value: string;
            meta: {
                [key: string]: string;
            };
        };
        CreateTenantBody: {
            /** @description The name of the tenant */
            name: string;
            /** @description The description of the tenant */
            description?: string | null;
            /**
             * Format: uuid
             * @description The owner of the tenant
             */
            ownerId: string;
        };
        CreateTenantMetaBody: {
            key: string;
            value: string;
        };
        CreateTokenBody: {
            /**
             * Format: int64
             * @description The expiration time of the token
             *
             *     The expiration time of the token in seconds.
             *
             */
            expiration: number;
            /**
             * Format: uuid
             * @description A single tenant ID
             *
             *     If specified, the actions allowed by the token will be scoped to the
             *     tenant. If not specified, the actions allowed by the token will be
             *     scoped to the user profile.
             *
             */
            tenantId?: string | null;
            /**
             * Format: uuid
             * @description A single service account ID
             *
             *     If specified, the actions allowed by the token will be scoped to the
             *     service account. Service account should be a subscription account,
             *     tenant management account, or role scoped account. If not specified, the
             *     actions allowed by the token will be scoped to the user profile.
             *
             */
            serviceAccountId?: string | null;
            /** @description A list of roles
             *
             *     If specified, the actions allowed by the token will be scoped to the
             *     roles. If not specified, the actions allowed by the token will be
             *     scoped to the user profile.
             *      */
            roles?: string[] | null;
            /** @description The permissioned roles
             *
             *     If specified, the actions allowed by the token will be scoped to the
             *     roles and permissions. Otherwise, the complete set of roles and
             *     permissions present in the user profile will be used.
             *      */
            permissionedRoles?: [
                string,
                "read" | "write"
            ][] | null;
        };
        CreateTokenResponse: {
            connectionString: string;
        };
        CreateWebHookBody: {
            name: string;
            description?: string | null;
            url: string;
            trigger: components["schemas"]["WebHookTrigger"];
            secret?: null | components["schemas"]["HttpSecret"];
        };
        DeleteAccountMetaParams: {
            key: string;
        };
        DeleteAccountTagParams: {
            /** Format: uuid */
            accountId: string;
        };
        DeleteTenantMetaBody: {
            key: string;
        };
        DowngradeAccountPrivilegesBody: {
            to: components["schemas"]["DowngradeTargetAccountType"];
        };
        /** @enum {string} */
        DowngradeTargetAccountType: "manager" | "user";
        Email: {
            username: string;
            domain: string;
        };
        /** @description ErrorCode is a struct that represents an error code.
         *
         *     It is used to represent errors that occur in the system. Error should be
         *     internal or external. Internal errors are errors that are not expected to
         *     occur in the system. External errors are errors that are not expected to
         *     occur in the system. */
        ErrorCode: {
            /** @description The prefix of the error. */
            prefix: string;
            /**
             * Format: int32
             * @description The code of the error.
             */
            errorNumber: number;
            /** @description A compiled string of the prefix and code. */
            code?: string | null;
            /** @description The message of the error. */
            message: string;
            /** @description The details of the error. */
            details?: string | null;
            /** @description Whether the error is internal or external. */
            isInternal: boolean;
            /** @description Whether the error is native of mycelium or not. */
            isNative: boolean;
        };
        GuestRole: {
            /** Format: uuid */
            id?: string | null;
            name: string;
            slug: string;
            description?: string | null;
            permission: components["schemas"]["Permission"];
            /**
             * Format: date-time
             * @description The date and time the role was created
             */
            created: string;
            /**
             * Format: date-time
             * @description The date and time the role was last updated
             */
            updated?: string | null;
            /** @description If it is a system role
             *
             *     System roles represents standard core actors of the Mycelium API
             *     Gateway, defined in `SystemActor`
             *      */
            system: boolean;
            children?: null | components["schemas"]["Children_GuestRole_String"];
        };
        GuestTenantOwnerBody: {
            email: string;
        };
        GuestUser: {
            /**
             * Format: uuid
             * @description The guest user id
             */
            id?: string | null;
            /** @description The guest user email
             *
             *     The email is used to identify the guest user connection with the target
             *     account.
             *      */
            email: components["schemas"]["Email"];
            /** @description The guest user role */
            guestRole: components["schemas"]["Parent_GuestRole_String"];
            /**
             * Format: date-time
             * @description The guesting date
             */
            created: string;
            /**
             * Format: date-time
             * @description The last updated date
             */
            updated?: string | null;
            accounts?: null | components["schemas"]["Children_Account_String"];
            /** @description The guest user is verified
             *
             *     WHile the user is not verified, the user will not be able to access
             *     the account.
             *      */
            wasVerified: boolean;
        };
        GuestUserBody: {
            email: string;
        };
        GuestUserToChildrenBody: {
            /** @description The email of the guest user */
            email: string;
            /**
             * Format: uuid
             * @description The parent role id
             *
             *     The parent related to the guest role to be created. Example, if the
             *     guest role is a child of the account manager role, the parent role id
             *     should be this role id.
             *
             *     The child role id should be passed as the `role_id` path argument.
             */
            parentRoleId: string;
        };
        GuestUserToSubscriptionManagerAccountBody: {
            email: string;
            permission: components["schemas"]["Permission"];
        };
        HashMap: {
            [key: string]: string;
        };
        /** @description The health status of the service
         *
         *     The status should be Unknown, Healthy or Unhealthy. At the startup of the
         *     service, the status should be Unknown. When the health check is successful,
         *     the status should be Healthy. When the health check is not successful, the
         *     status should be Unhealthy.
         *      */
        HealthStatus: "unknown" | {
            /** @description The health status is healthy
             *      */
            healthy: {
                /**
                 * Format: date-time
                 * @description The timestamp for the last health check
                 *
                 */
                checkedAt: string;
            };
        } | {
            /** @description The health status is fully unhealthy
             *      */
            unhealthy: {
                /**
                 * Format: date-time
                 * @description The timestamp for the last health check
                 *
                 */
                checkedAt: string;
                /**
                 * Format: int32
                 * @description The number of attempts with unhealthy status
                 *
                 */
                attempts: number;
                /** @description Unhealthy instances
                 *      */
                unhealthyInstances: components["schemas"]["UnhealthyInstance"][];
            };
        } | {
            unavailable: {
                /**
                 * Format: date-time
                 * @description The timestamp for the last health check
                 *
                 */
                checkedAt: string;
                /**
                 * Format: int32
                 * @description The number of attempts with unavailable status
                 *
                 */
                attempts: number;
                /** @description The error message
                 *      */
                errorMessage: string;
            };
        };
        HttpJsonResponse: {
            msg?: string | null;
            code?: string | null;
            body?: string | null;
        };
        /** @enum {string} */
        HttpMethod: "GET" | "HEAD" | "PATCH" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "ALL" | "NONE";
        HttpSecret: {
            /** @description Authentication header
             *
             *     The secret is passed as an authentication header.
             *      */
            authorizationHeader: {
                /** @description The header name
                 *
                 *     The name of the header. For example, if the name is `Authorization`,
                 *     the header will be `Authorization Bear: <token value>`. The default
                 *     value is `Authorization`.
                 *      */
                headerName?: string | null;
                /** @description The header prefix
                 *
                 *     If present the prefix is added to the header. For example, if the
                 *     prefix is `Bearer`, the header will be `Authorization Bearer: <token
                 *     value>`.
                 *      */
                prefix?: string | null;
                /** @description The header token
                 *
                 *     The token is the value of the header. For example, if the token is
                 *     `1234`, the header will be `Authorization Bearer: 123
                 *      */
                token: string;
            };
        } | {
            queryParameter: {
                /** @description The query parameter name
                 *
                 *     The name of the query parameter. For example, if the name is `token`,
                 *     the query parameter will be `?token=<token value>`.
                 *      */
                name: string;
                /** @description The query parameter value
                 *
                 *     The value of the query parameter. For example, if the value is `1234`,
                 *     the query parameter will be `?token=1234`.
                 *      */
                token: string;
            };
        };
        /** @enum {string} */
        IDSource: "user" | "account";
        ItemsType: components["schemas"]["Schema"] | boolean;
        LicensedResource: {
            /**
             * Format: uuid
             * @description The guest account unique id
             *
             *     This is the unique identifier of the account that is own of the
             *     resource to be managed.
             */
            accId: string;
            /** @description If the guest account is a system account
             *
             *     System accounts has permissions to act as special users into the
             *     Mycelium system. */
            sysAcc: boolean;
            /**
             * Format: uuid
             * @description The guest account tenant unique id
             *
             *     This is the unique identifier of the tenant that is own of the resource
             *     to be managed.
             */
            tenantId: string;
            /** @description The guest account name
             *
             *     This is the name of the account that is own of the resource to be
             *     managed. */
            accName: string;
            /** @description The guest account role verbose name
             *
             *     This is the verbose name of the role that is own of the resource to be
             *     managed. */
            role: string;
            /** @description The guest role permissions
             *
             *     This is the list of permissions that the guest role has. */
            perm: components["schemas"]["Permission"];
            /** @description If the guest account was verified
             *
             *     If the user accepted the invitation to join the account, the account
             *     should be verified.
             *      */
            verified: boolean;
        };
        LicensedResources: {
            records: components["schemas"]["LicensedResource"][];
        } | {
            urls: string[];
        };
        ListErrorCodesParams: {
            prefix?: string | null;
            /** Format: int32 */
            code?: number | null;
            isInternal?: boolean | null;
        };
        ListGuestRolesParams: {
            /** @description The name of the guest role. */
            name?: string | null;
            /** @description The slug of the guest role. */
            slug?: string | null;
            /** @description If it is a system role. */
            system?: boolean | null;
        };
        ListLicensedAccountsOfEmailParams: {
            /** @description The email which the guest user is connected to */
            email: string;
            /** @description The roles which the guest user was invited to */
            roles?: string[] | null;
            /** @description The permissioned roles which the guest user was invited to */
            permissionedRoles?: [
                string,
                "read" | "write"
            ][] | null;
            /** @description The guest user was verified */
            wasVerified?: boolean | null;
        };
        ListRoutesByServiceParams: {
            /** Format: uuid */
            id?: string | null;
            name?: string | null;
        };
        ListServicesParams: {
            /** Format: uuid */
            id?: string | null;
            name?: string | null;
        };
        ListServicesResponse: {
            /** @description Description
             *
             *     The description of the service.
             *      */
            description: string;
            /** @description The contexts
             *
             *     The contexts of the service. This key snould include the context where
             *     the service should run, including authentication and authorization
             *     information.
             *      */
            contexts: components["schemas"]["Tool"][];
            /**
             * Format: date-time
             * @description The last updated date
             *
             *     The last updated date of the service.
             *
             */
            lastUpdated?: string | null;
            /** @description A list of tools
             *
             *     A list of tools that are discoverable by the service.
             *      */
            tools: components["schemas"]["Tool"][];
        };
        ListSubscriptionAccountParams: {
            term?: string | null;
            tagValue?: string | null;
            accountType?: null | components["schemas"]["APIAccountType"];
            isOwnerActive?: boolean | null;
            status?: null | components["schemas"]["VerboseStatus"];
            actor?: null | components["schemas"]["SystemActor"];
        };
        ListTenantParams: {
            /** @description Filter tenants by name */
            name?: string | null;
            /**
             * Format: uuid
             * @description Filter tenants by owner
             */
            owner?: string | null;
            /** @description Filter tenants by metadata key */
            metadata?: string | null;
            /** @description Filter tenants by tag
             *
             *     Example: `key=value` */
            tag?: string | null;
        };
        ListWebHooksParams: {
            name?: string | null;
            trigger?: null | components["schemas"]["WebHookTrigger"];
        };
        /** @enum {string} */
        Location: "query" | "path" | "header" | "cookie";
        MultiFactorAuthentication: {
            /** @description The TOTP
             *
             *     The TOTP is disabled by default.
             *      */
            totp: components["schemas"]["Totp"];
        };
        MyceliumLoginResponse: components["schemas"]["User"] & {
            token: string;
            duration: string;
            totpRequired: boolean;
        };
        Operation: {
            operationId?: string | null;
            tags?: string[];
            summary?: string | null;
            description?: string | null;
            parameters?: components["schemas"]["Parameter"][] | null;
            requestBody?: null | components["schemas"]["Content"];
            responses?: {
                [key: string]: components["schemas"]["Content"];
            } | null;
            deprecated?: boolean | null;
            security?: unknown;
        };
        Owner: {
            /** Format: uuid */
            id: string;
            /** @description The owner email
             *
             *     The email of the user that administrate the profile. Email denotes the
             *     central part of the profile management. Email should be used to collect
             *     licensed IDs and perform guest operations. Thus, it should be unique in
             *     the Mycelium platform. */
            email: string;
            /** @description The owner first name */
            firstName?: string | null;
            /** @description The owner last name */
            lastName?: string | null;
            /** @description The owner username */
            username?: string | null;
            /** @description If the owner is the principal account owner */
            isPrincipal: boolean;
        };
        /** @description A default pagination response
         *
         *     A paginated record include the total number of records found into a query
         *     plus page size which records will be retrieved, the number of records to be
         *     ignored (such value should be discovered after the first query), and the
         *     records itself. */
        PaginatedRecord_GuestUser: {
            /** Format: int64 */
            count: number;
            /** Format: int64 */
            skip?: number | null;
            /** Format: int64 */
            size?: number | null;
            records: {
                /**
                 * Format: uuid
                 * @description The guest user id
                 */
                id?: string | null;
                /** @description The guest user email
                 *
                 *     The email is used to identify the guest user connection with the target
                 *     account.
                 *      */
                email: components["schemas"]["Email"];
                /** @description The guest user role */
                guestRole: components["schemas"]["Parent_GuestRole_String"];
                /**
                 * Format: date-time
                 * @description The guesting date
                 */
                created: string;
                /**
                 * Format: date-time
                 * @description The last updated date
                 */
                updated?: string | null;
                accounts?: null | components["schemas"]["Children_Account_String"];
                /** @description The guest user is verified
                 *
                 *     WHile the user is not verified, the user will not be able to access
                 *     the account.
                 *      */
                wasVerified: boolean;
            }[];
        };
        Parameter: {
            name?: string;
            in: components["schemas"]["Location"];
            description?: string | null;
            required?: boolean | null;
            deprecated?: boolean | null;
            allowEmptyValue?: boolean | null;
            style?: string | null;
            explode?: boolean | null;
            schema: components["schemas"]["SchemaOrOneOf"];
        };
        /** @description A parent record
         *
         *     This enumerator allow represents the parent elements using their primary
         *     key (Id option) or the true record (Record option). */
        Parent_Account_String: {
            record: {
                /**
                 * Format: uuid
                 * @description The Account ID
                 */
                id?: string | null;
                /** @description The Account Name */
                name: string;
                /** @description The Account Slug
                 *
                 *     This is generated from the account name. This is used for programmatic
                 *     access and verification of the account.
                 *      */
                slug: string;
                /** @description Account Tags
                 *
                 *     Information about the account. This is used for categorizing and filter
                 *     account.
                 *      */
                tags?: components["schemas"]["Tag"][] | null;
                /** @description Account is active
                 *
                 *     If the account is active. This is used for logic trash and restore
                 *     account.
                 *      */
                isActive: boolean;
                /** @description Account is checked
                 *
                 *     If the account was verified by a human. This is used for account
                 *     verification.
                 *      */
                isChecked: boolean;
                /** @description Account is archived
                 *
                 *     If the account is archived. This is used for account archiving.
                 *      */
                isArchived: boolean;
                /** @description Account is deleted
                 *
                 *     If the account is deleted. This is used for logic trash and restore
                 *     account.
                 *      */
                isDeleted: boolean;
                verboseStatus?: null | components["schemas"]["VerboseStatus"];
                isDefault: boolean;
                /** @description The Account Owners
                 *
                 *     This is the list of account owners. The account owners are the users who
                 *     have the account owner role. */
                owners: components["schemas"]["Children_User_String"];
                /** @description The Account Type
                 *
                 *     Account type is the type of the account. The account type is used to
                 *     categorize the account. */
                accountType: components["schemas"]["AccountType"];
                guestUsers?: null | components["schemas"]["Children_GuestUser_String"];
                /**
                 * Format: date-time
                 * @description The Account Created Date
                 */
                createdAt: string;
                createdBy?: null | components["schemas"]["WrittenBy"];
                /**
                 * Format: date-time
                 * @description The Account Updated Date
                 */
                updatedAt?: string | null;
                updatedBy?: null | components["schemas"]["WrittenBy"];
                /** @description The Account Meta
                 *
                 *     Store metadata about the account.
                 *      */
                meta?: {
                    [key: string]: string;
                } | null;
            };
        } | {
            id: string;
        };
        /** @description A parent record
         *
         *     This enumerator allow represents the parent elements using their primary
         *     key (Id option) or the true record (Record option). */
        Parent_GuestRole_String: {
            record: {
                /** Format: uuid */
                id?: string | null;
                name: string;
                slug: string;
                description?: string | null;
                permission: components["schemas"]["Permission"];
                /**
                 * Format: date-time
                 * @description The date and time the role was created
                 */
                created: string;
                /**
                 * Format: date-time
                 * @description The date and time the role was last updated
                 */
                updated?: string | null;
                /** @description If it is a system role
                 *
                 *     System roles represents standard core actors of the Mycelium API
                 *     Gateway, defined in `SystemActor`
                 *      */
                system: boolean;
                children?: null | components["schemas"]["Children_GuestRole_String"];
            };
        } | {
            id: string;
        };
        /** @description A parent record
         *
         *     This enumerator allow represents the parent elements using their primary
         *     key (Id option) or the true record (Record option). */
        Parent_Service_String: {
            /** @description The Upstream Service
             *
             *     The service is the upstream service that the route will proxy to.
             *      */
            record: {
                /**
                 * Format: uuid
                 * @description The service id
                 *
                 *     The id of the service. If the id is not provided, the service will be
                 *     generated using the name of the service.
                 *
                 */
                id: string;
                /** @description The service unique name
                 *
                 *     The name of the service. The name should be unique and is used to
                 *     identify the service and call it from the gateway url path.
                 *      */
                name: string;
                /** @description The service host
                 *
                 *     The host of the service. The host should include the port number. It
                 *     can be a single host or a vector of hosts.
                 *      */
                host: components["schemas"]["ServiceHost"];
                /** @description The service protocol
                 *
                 *     The protocol of the service.
                 *      */
                protocol?: components["schemas"]["Protocol"];
                /** @description The service routes
                 *
                 *     The routes of the service.
                 *      */
                routes: components["schemas"]["Route"][];
                /** @description The health status of the service
                 *      */
                healthStatus: components["schemas"]["HealthStatus"];
                /** @description The service health check configuration
                 *
                 *     The health check configuration for the service.
                 *      */
                healthCheckPath: string;
                /** @description The service discoverable
                 *
                 *     When true, the service will be discovered by LLM agents.
                 *      */
                discoverable?: boolean | null;
                serviceType?: null | components["schemas"]["ServiceType"];
                /** @description If is a context api
                 *
                 *     If is a context api, the service will be discovered by LLM agents.
                 *      */
                isContextApi?: boolean | null;
                /** @description The service capabilities
                 *
                 *     Optional together with discoverable field. The capabilities of the
                 *     service.
                 *      */
                capabilities?: string[] | null;
                /** @description The service description
                 *
                 *     Optional together with discoverable field. The description of the
                 *     service. The description should be used during the service discovery by
                 *     LLM agents.
                 *      */
                description?: string | null;
                /** @description The service openapi path
                 *
                 *     Optional together with discoverable field. The path to the openapi.json
                 *     file. The file should be used for external clients to discover the
                 *     service. Is is used for the service discovery by LLM agents.
                 *      */
                openapiPath?: string | null;
                /** @description The service secrets
                 *
                 *     The secrets of the service. Secrets are used to authenticate the api
                 *     gateway at the downstream service. Individual routes can request a
                 *     specific secret of this secrets vector.
                 *      */
                secrets?: components["schemas"]["ServiceSecret"][] | null;
                /** @description The allowed sources
                 *
                 *     A list of sources with permissions to access the downstream service.
                 *     Values can be a domain name, ip address, a cidr block or a wildcard
                 *     domain name.
                 *      */
                allowedSources?: string[] | null;
                /** @description The proxy address
                 *
                 *     The proxy address of the service. This is used to forward requests to
                 *     the service through a proxy. If the service is not behind a proxy, this
                 *     field should be empty.
                 *
                 *     Example:
                 *
                 *     ```yaml
                 *     proxyAddress: http://proxy.example.com:8080
                 *     ```
                 *
                 *     Then, the downstream url should be:
                 *
                 *     ```
                 *     http://proxy.example.com:8080/http://service.example.com:8080/api/v1/service/1234567890
                 *     ```
                 *      */
                proxyAddress?: string | null;
            };
        } | {
            id: string;
        };
        PasswordHash: Record<string, never>;
        /** @enum {string} */
        Permission: "read" | "write";
        /** @description This object should be used over the application layer operations. */
        Profile: {
            owners: components["schemas"]["Owner"][];
            /**
             * Format: uuid
             * @description The account unique id
             *
             *     Such ID is related to the account primary-key instead of the owner
             *     primary key. In the case of the subscription accounts (accounts flagged
             *     with `is_subscription`) such ID should be propagated along the
             *     application flow.
             */
            accId: string;
            /** @description If profile belongs to a `subscription` account
             *
             *     Subscription accounts should be used to manage legal entities. Only
             *     subscription accounts should receive guest accounts. */
            isSubscription: boolean;
            /** @description If profile belongs to a `manager` account
             *
             *     Manager accounts should be used by users with elevated privileges inside
             *     the Mycelium platform. Such user should perform actions like create
             *     roles, guest-roles, guest default-user accounts to work into
             *     subscription accounts. */
            isManager: boolean;
            /** @description If profile belongs to a `staff` account
             *
             *     Staff user has elevated roles into the application. Like managers, staff
             *     users has elevated privileges. Only staff user has permission to
             *     delegate other staffs. */
            isStaff: boolean;
            /** @description If the account owner is active
             *
             *     Profiles exists to abstract account privileges. If the profile is
             *     related to an inactive owner the profile could not perform any action.
             *     Only staff or manager user should perform the activation of such users. */
            ownerIsActive: boolean;
            /** @description If the account itself is inactive
             *
             *     When inactive accounts should not perform internal operations. */
            accountIsActive: boolean;
            /** @description If the account was approved after registration
             *
             *     New accounts should be approved by manager or staff users after their
             *     registration into the Mycelium platform. Case the approval was
             *     performed, this flag should be true. */
            accountWasApproved: boolean;
            /** @description If the account was archived after registration
             *
             *     New accounts should be archived. After archived accounts should not be
             *     included at default filtering actions. */
            accountWasArchived: boolean;
            /** @description If the account was deleted after registration
             *
             *     New accounts should be deleted. After deleted accounts should not be
             *     included at default filtering actions. */
            accountWasDeleted: boolean;
            verboseStatus?: null | components["schemas"]["VerboseStatus"];
            licensedResources?: null | components["schemas"]["LicensedResources"];
            tenantsOwnership?: null | components["schemas"]["TenantsOwnership"];
            /** @description This argument stores the licensed resources state
             *
             *     The licensed_resources_state should store the current filtering state.
             *     The filtering state should be populated when a filtering cascade is
             *     performed. As example:
             *
             *     If a profile with two licensed resources is filtered by the tenant_id
             *     the state should store the tenant id used to filter licensed resources.
             *
             *     State formatting:
             *
             *     ```json
             *     [
             *        "1:tenantId:123e4567-e89b-12d3-a456-426614174000",
             *     ]
             *     ```
             *
             *     And then, if the used apply a secondary filter, by permission, the state
             *     should be updated to:
             *
             *     ```json
             *     [
             *       "1:tenantId:123e4567-e89b-12d3-a456-426614174000",
             *       "2:permission:1",
             *     ]
             *     ```
             *
             *     If a consecutive filter with more one tenant is applied, the state
             *     should be updated to:
             *
             *     ```json
             *     [
             *      "1:tenantId:123e4567-e89b-12d3-a456-426614174000",
             *      "2:permission:1",
             *      "3:tenantId:123e4567-e89b-12d3-a456-426614174001",
             *     ]
             *     ```
             *      */
            filteringState?: string[] | null;
        };
        /** @enum {string} */
        Protocol: "http" | "https" | "grpc";
        Provider: {
            external: string;
        } | {
            internal: components["schemas"]["PasswordHash"];
        };
        ResetPasswordBody: {
            token: string;
            email: string;
            newPassword: string;
        };
        RevokeUserGuestToSubscriptionManagerAccountParams: {
            email: string;
        };
        Route: {
            /**
             * Format: uuid
             * @description The route id
             */
            id?: string | null;
            /** @description The route service */
            service: components["schemas"]["Parent_Service_String"];
            /** @description The route name */
            securityGroup: components["schemas"]["SecurityGroup"];
            /** @description The route description */
            methods: components["schemas"]["HttpMethod"][];
            /** @description The route url */
            path: string;
            /** @description The route secret name if it exists */
            secretName?: string | null;
            /** @description The route without tls
             *
             *     This field should be evaluated if the route should request a secret to
             *     be send to the downstream service, if the route is not secure.
             *      */
            acceptInsecureRouting?: boolean | null;
        };
        Schema: {
            $ref?: string | null;
            type?: null | components["schemas"]["SchemaType"];
            title?: string | null;
            format?: string | null;
            nullable?: boolean | null;
            required?: string[] | null;
            properties?: {
                [key: string]: components["schemas"]["Schema"];
            } | null;
            items?: null | components["schemas"]["ItemsType"];
            enumValues?: unknown[] | null;
            description?: string | null;
            default?: unknown;
        };
        SchemaOrOneOf: components["schemas"]["Schema"] & {
            oneOf?: components["schemas"]["Schema"][] | null;
        };
        SchemaType: string | string[];
        /** @description A secret resolver
         *
         *     The secret resolver is a way to resolve a secret value from different
         *     sources.
         *      */
        SecretResolver_HttpSecret: {
            /** @description Retrieve the value from the environment variable
             *
             *     The value should be the name of the environment variable.
             *
             *     # Example
             *
             *     ```bash
             *     export MY_ENV_VAR="my_value"
             *     ```
             *
             *     ```yaml
             *     databaseUrl:
             *         env: "MY_ENV_VAR"
             *     ```
             *
             *     The value of `databaseUrl` will be `my_value`
             *      */
            env: string;
        } | {
            /** @description Retrieve the value from the vault
             *
             *     The value should be the name of the vault secret.
             *
             *     # Example
             *
             *     ```yaml
             *     databaseUrl:
             *         vault:
             *             path: "my_vault_secret"
             *             key: "my_key"
             *     ```
             *
             *     The value of `databaseUrl` will be the value of the secret located at
             *     `path/my_vault_secret` in the vault.
             *      */
            vault: {
                path: string;
                key: string;
            };
        } | {
            value: {
                /** @description Authentication header
                 *
                 *     The secret is passed as an authentication header.
                 *      */
                authorizationHeader: {
                    /** @description The header name
                     *
                     *     The name of the header. For example, if the name is `Authorization`,
                     *     the header will be `Authorization Bear: <token value>`. The default
                     *     value is `Authorization`.
                     *      */
                    headerName?: string | null;
                    /** @description The header prefix
                     *
                     *     If present the prefix is added to the header. For example, if the
                     *     prefix is `Bearer`, the header will be `Authorization Bearer: <token
                     *     value>`.
                     *      */
                    prefix?: string | null;
                    /** @description The header token
                     *
                     *     The token is the value of the header. For example, if the token is
                     *     `1234`, the header will be `Authorization Bearer: 123
                     *      */
                    token: string;
                };
            } | {
                queryParameter: {
                    /** @description The query parameter name
                     *
                     *     The name of the query parameter. For example, if the name is `token`,
                     *     the query parameter will be `?token=<token value>`.
                     *      */
                    name: string;
                    /** @description The query parameter value
                     *
                     *     The value of the query parameter. For example, if the value is `1234`,
                     *     the query parameter will be `?token=1234`.
                     *      */
                    token: string;
                };
            };
        };
        SecurityGroup: "public" | "authenticated" | "protected" | {
            /** @description
             *     Protect the route with the user profile filtered by roles
             *      */
            protectedByRoles: {
                roles: string[];
            };
        } | {
            /** @description
             *     Protect the route with the user profile filtered by roles and
             *     permissions
             *      */
            protectedByPermissionedRoles: {
                permissionedRoles: [
                    string,
                    "read" | "write"
                ][];
            };
        } | {
            /** @description
             *     Protect the route with service token associated to a specific role list
             *      */
            protectedByServiceTokenWithRole: {
                roles: string[];
            };
        } | {
            /** @description
             *     Protect the route with service token associated to a specific role and
             *     permissions
             *      */
            protectedByServiceTokenWithPermissionedRoles: {
                permissionedRoles: [
                    string,
                    "read" | "write"
                ][];
            };
        };
        /** @description The Upstream Service
         *
         *     The service is the upstream service that the route will proxy to.
         *      */
        Service: {
            /**
             * Format: uuid
             * @description The service id
             *
             *     The id of the service. If the id is not provided, the service will be
             *     generated using the name of the service.
             *
             */
            id: string;
            /** @description The service unique name
             *
             *     The name of the service. The name should be unique and is used to
             *     identify the service and call it from the gateway url path.
             *      */
            name: string;
            /** @description The service host
             *
             *     The host of the service. The host should include the port number. It
             *     can be a single host or a vector of hosts.
             *      */
            host: components["schemas"]["ServiceHost"];
            /** @description The service protocol
             *
             *     The protocol of the service.
             *      */
            protocol?: components["schemas"]["Protocol"];
            /** @description The service routes
             *
             *     The routes of the service.
             *      */
            routes: components["schemas"]["Route"][];
            /** @description The health status of the service
             *      */
            healthStatus: components["schemas"]["HealthStatus"];
            /** @description The service health check configuration
             *
             *     The health check configuration for the service.
             *      */
            healthCheckPath: string;
            /** @description The service discoverable
             *
             *     When true, the service will be discovered by LLM agents.
             *      */
            discoverable?: boolean | null;
            serviceType?: null | components["schemas"]["ServiceType"];
            /** @description If is a context api
             *
             *     If is a context api, the service will be discovered by LLM agents.
             *      */
            isContextApi?: boolean | null;
            /** @description The service capabilities
             *
             *     Optional together with discoverable field. The capabilities of the
             *     service.
             *      */
            capabilities?: string[] | null;
            /** @description The service description
             *
             *     Optional together with discoverable field. The description of the
             *     service. The description should be used during the service discovery by
             *     LLM agents.
             *      */
            description?: string | null;
            /** @description The service openapi path
             *
             *     Optional together with discoverable field. The path to the openapi.json
             *     file. The file should be used for external clients to discover the
             *     service. Is is used for the service discovery by LLM agents.
             *      */
            openapiPath?: string | null;
            /** @description The service secrets
             *
             *     The secrets of the service. Secrets are used to authenticate the api
             *     gateway at the downstream service. Individual routes can request a
             *     specific secret of this secrets vector.
             *      */
            secrets?: components["schemas"]["ServiceSecret"][] | null;
            /** @description The allowed sources
             *
             *     A list of sources with permissions to access the downstream service.
             *     Values can be a domain name, ip address, a cidr block or a wildcard
             *     domain name.
             *      */
            allowedSources?: string[] | null;
            /** @description The proxy address
             *
             *     The proxy address of the service. This is used to forward requests to
             *     the service through a proxy. If the service is not behind a proxy, this
             *     field should be empty.
             *
             *     Example:
             *
             *     ```yaml
             *     proxyAddress: http://proxy.example.com:8080
             *     ```
             *
             *     Then, the downstream url should be:
             *
             *     ```
             *     http://proxy.example.com:8080/http://service.example.com:8080/api/v1/service/1234567890
             *     ```
             *      */
            proxyAddress?: string | null;
        };
        ServiceHost: string | string[];
        ServiceSecret: components["schemas"]["SecretResolver_HttpSecret"] & {
            name: string;
        };
        /** @enum {string} */
        ServiceType: "rest-api" | "unknown";
        ServiceWrapper: {
            /** @description The service name
             *
             *     The name of the service.
             *      */
            name: string;
            /** @description The service health status
             *
             *     The health status of the service.
             *      */
            health_status: components["schemas"]["HealthStatus"];
            /** @description The service capabilities
             *
             *     The capabilities of the service.
             *      */
            capabilities?: string[] | null;
            /** @description The service description
             *
             *     The description of the service. The description should be used during
             *     the service discovery by LLM agents.
             *      */
            description?: string | null;
        };
        StartPasswordResetBody: {
            email: string;
        };
        /** @description The System Actors
         *
         *     Standard actors used to validate operations during the authorization process
         *     in system use-cases.
         *      */
        SystemActor: {
            customRole: string;
        } | "beginner" | "subscriptionsManager" | "usersManager" | "accountManager" | "guestsManager" | "gatewayManager" | "systemManager" | "tenantOwner" | "tenantManager" | "service";
        Tag: {
            /** Format: uuid */
            id: string;
            value: string;
            meta?: {
                [key: string]: string;
            } | null;
        };
        Tenant: {
            /**
             * Format: uuid
             * @description The unique identifier of the tenant
             */
            id?: string | null;
            /** @description The name of the tenant */
            name: string;
            /** @description The description of the tenant */
            description?: string | null;
            /** @description The owner of the tenant
             *
             *     This is the email of the tenant owner, which is also the pub owner. The
             *     tenant owner should be set on tenant creation. */
            owners: components["schemas"]["Children_Owner_String"];
            manager?: null | components["schemas"]["Parent_Account_String"];
            /** @description The tags of the tenant
             *
             *     This is the list of tags of the tenant. The tags are used to categorize
             *     the tenant. The tags are used to categorize the tenant. */
            tags?: components["schemas"]["Tag"][] | null;
            /** @description Meta information
             *
             *     This is the meta information of the tenant. The meta information is a
             *     key-value pair of string. The key is the name of the meta information,
             *     and the value is the value of the meta information. */
            meta?: {
                [key: string]: string;
            } | null;
            /** @description The status of the tenant
             *
             *     This is the status of the tenant. The status is a key-value pair of
             *     string. The key is the name of the status (defined in `StatusKey`), and
             *     the value is the value of the status. */
            status?: components["schemas"]["TenantStatus"][] | null;
            /**
             * Format: date-time
             * @description The date and time the tenant was created
             */
            created: string;
            /**
             * Format: date-time
             * @description The date and time the tenant was last updated
             */
            updated?: string | null;
        };
        TenantMetaKey: "federal_revenue_register" | "federal_revenue_register_type" | "country" | "state" | "province" | "city" | "address1" | "address2" | "zip_code" | {
            /** @description To specify any other meta key
             *
             *     Specify any other meta key that is not listed here. */
            custom: string;
        };
        TenantOwnerConnection: {
            /** Format: uuid */
            tenantId: string;
            /** Format: uuid */
            ownerId: string;
            guestBy: string;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated?: string | null;
        };
        TenantOwnership: {
            /**
             * Format: uuid
             * @description The tenant ID that the profile has administration privileges
             */
            tenant: string;
            /**
             * Format: date-time
             * @description The date and time the tenant was granted to the profile
             */
            since: string;
        };
        TenantStatus: {
            verified: {
                /** Format: date-time */
                at: string;
                by: string;
            };
        } | {
            trashed: {
                /** Format: date-time */
                at: string;
                by: string;
            };
        } | {
            archived: {
                /** Format: date-time */
                at: string;
                by: string;
            };
        };
        TenantsOwnership: {
            records: components["schemas"]["TenantOwnership"][];
        } | {
            urls: string[];
        };
        Tool: {
            /** @description The service unique name
             *
             *     The name of the service. The name should be unique and is used to
             *     identify the service and call it from the gateway url path.
             *      */
            name: string;
            /** @description The service description
             *
             *     Optional together with discoverable field. The description of the
             *     service. The description should be used during the service discovery by
             *     LLM agents.
             *      */
            description: string;
            /** @description The service type
             *
             *     The type of the service.
             *      */
            toolType: components["schemas"]["ServiceType"];
            /** @description If is a context api
             *
             *     If is a context api, the service will be discovered by LLM agents.
             *      */
            isContextApi: boolean;
            /** @description The service capabilities
             *
             *     The capabilities of the service.
             *      */
            capabilities: string[];
            /** @description The service openapi path
             *
             *     Optional together with discoverable field. The path to the openapi.json
             *     file. The file should be used for external clients to discover the
             *     service. Is is used for the service discovery by LLM agents.
             *      */
            openapiPath: string;
            /** @description The service health status
             *
             *     The health status of the service.
             *      */
            healthStatus: components["schemas"]["HealthStatus"];
        };
        ToolOperation: components["schemas"]["Operation"] & {
            /** @description The path
             *
             *     The openapi operation path. This should include the parent service
             *     name.
             *      */
            path: string;
            /** @description The method
             *
             *     The allowed method of the operation.
             *      */
            method: components["schemas"]["HttpMethod"];
            /** @description The mycelium security group
             *
             *     The mycelium security group for the operation.
             *      */
            security_group: components["schemas"]["SecurityGroup"];
            /** @description The related service
             *
             *     The related service of the operation.
             *      */
            service: components["schemas"]["ServiceWrapper"];
        };
        Totp: "unknown" | "disabled" | {
            /** @description The TOTP when enabled
             *
             *     The TOTP is enabled when the user has verified the TOTP and the auth
             *     url is set. The secret is not serialized to avoid that the secret is
             *     exposed to the outside.
             *      */
            enabled: {
                verified: boolean;
                issuer: string;
                secret?: string | null;
            };
        };
        TotpActivationStartedResponse: {
            totpUrl?: string | null;
        };
        TotpUpdatingValidationBody: {
            token: string;
        };
        /** @description The unhealthy instance
         *
         *     The unhealthy instance is a single instance of the service that is
         *     unhealthy.
         *      */
        UnhealthyInstance: {
            /** @description The instance ID
             *      */
            host: string;
            /**
             * Format: int32
             * @description The instance status code
             *
             */
            statusCode: number;
            /** @description The instance response body
             *      */
            responseBody?: string | null;
            /** @description The error message
             *      */
            errorMessage?: string | null;
            /**
             * Format: date-time
             * @description The timestamp for the last health check
             *
             */
            checkedAt: string;
        };
        UpdateAccountTagBody: {
            /** Format: uuid */
            accountId: string;
            value: string;
            meta: {
                [key: string]: string;
            };
        };
        UpdateErrorCodeMessageAndDetailsBody: {
            message: string;
            details?: string | null;
        };
        UpdateGuestRoleNameAndDescriptionBody: {
            name?: string | null;
            description?: string | null;
        };
        UpdateGuestRolePermissionsBody: {
            permission: components["schemas"]["Permission"];
        };
        UpdateOwnAccountNameAccountBody: {
            name: string;
        };
        UpdateSubscriptionAccountNameAndFlagsBody: {
            name?: string | null;
            isActive?: boolean | null;
            isChecked?: boolean | null;
            isArchived?: boolean | null;
            isDefault?: boolean | null;
        };
        UpdateTenantNameAndDescriptionBody: {
            name?: string | null;
            description?: string | null;
        };
        UpdateWebHookBody: {
            name?: string | null;
            description?: string | null;
            secret?: null | components["schemas"]["HttpSecret"];
            isActive?: boolean | null;
        };
        UpgradeAccountPrivilegesBody: {
            to: components["schemas"]["UpgradeTargetAccountType"];
        };
        /** @enum {string} */
        UpgradeTargetAccountType: "staff" | "manager";
        User: {
            /** Format: uuid */
            id?: string | null;
            username: string;
            email: components["schemas"]["Email"];
            firstName?: string | null;
            lastName?: string | null;
            isActive: boolean;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            updated?: string | null;
            account?: null | components["schemas"]["Parent_Account_String"];
            /** @description If the user is the principal user of the account.
             *
             *     The principal user contains information of the first email that created
             *     the account. This information is used to send emails to the principal
             *     user.
             *
             *     Principal users should not be deleted or deactivated if the account has
             *     other users connected.
             *      */
            isPrincipal: boolean;
            provider?: null | components["schemas"]["Provider"];
            /** @description The user TOTP
             *
             *     When enabled the user has verified the TOTP and the auth url is set.
             *      */
            mfa: components["schemas"]["MultiFactorAuthentication"];
        };
        ValueSchema: {
            schema: components["schemas"]["Schema"];
        };
        /** @enum {string} */
        VerboseStatus: "unverified" | "verified" | "inactive" | "archived" | "deleted" | "unknown";
        WebHook: {
            /**
             * Format: uuid
             * @description The webhook id
             */
            id?: string | null;
            /** @description The webhook name */
            name: string;
            /** @description The webhook description */
            description?: string | null;
            /** @description The webhook url */
            url: string;
            /** @description The webhook trigger */
            trigger: components["schemas"]["WebHookTrigger"];
            /** @description The webhook is active */
            isActive: boolean;
            /**
             * Format: date-time
             * @description The webhook created date
             */
            created: string;
            createdBy?: null | components["schemas"]["WrittenBy"];
            /**
             * Format: date-time
             * @description The webhook updated date
             */
            updated?: string | null;
            updatedBy?: null | components["schemas"]["WrittenBy"];
            secret?: null | components["schemas"]["HttpSecret"];
        };
        /** @enum {string} */
        WebHookTrigger: "subscriptionAccount.created" | "subscriptionAccount.updated" | "subscriptionAccount.deleted" | "userAccount.created" | "userAccount.updated" | "userAccount.deleted";
        WrittenBy: {
            /**
             * Format: uuid
             * @description The ID of the user who created the account
             */
            id: string;
            /** @description The ID source */
            from: components["schemas"]["IDSource"];
        };
    };
    responses: {
        CheckEmailStatusResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    email: string;
                    status: string;
                    provider?: string | null;
                    hasAccount: boolean;
                };
            };
        };
        CreateTokenResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    connectionString: string;
                };
            };
        };
        HttpJsonResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    msg?: string | null;
                    code?: string | null;
                    body?: string | null;
                };
            };
        };
        ListServicesResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @description Description
                     *
                     *     The description of the service.
                     *      */
                    description: string;
                    /** @description The contexts
                     *
                     *     The contexts of the service. This key snould include the context where
                     *     the service should run, including authentication and authorization
                     *     information.
                     *      */
                    contexts: components["schemas"]["Tool"][];
                    /**
                     * Format: date-time
                     * @description The last updated date
                     *
                     *     The last updated date of the service.
                     *
                     */
                    lastUpdated?: string | null;
                    /** @description A list of tools
                     *
                     *     A list of tools that are discoverable by the service.
                     *      */
                    tools: components["schemas"]["Tool"][];
                };
            };
        };
        MyceliumLoginResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["User"] & {
                    token: string;
                    duration: string;
                    totpRequired: boolean;
                };
            };
        };
        TotpActivationFinishedResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    finished: boolean;
                };
            };
        };
        TotpActivationStartedResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    totpUrl?: string | null;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    guest_to_children_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
                /** @description The guest-role unique id. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestUserToChildrenBody"];
            };
        };
        responses: {
            /** @description Guest already exist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Guesting done. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    get_my_account_details_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_default_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDefaultAccountBody"];
            };
        };
        responses: {
            /** @description Account already exists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_my_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account successfully deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_own_account_name_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOwnAccountNameAccountBody"];
            };
        };
        responses: {
            /** @description Account name successfully updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account name not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_account_meta_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccountMetaBody"];
            };
        };
        responses: {
            /** @description Meta updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Meta not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_account_meta_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccountMetaBody"];
            };
        };
        responses: {
            /** @description Meta created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HashMap"];
                };
            };
            /** @description Meta already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_account_meta_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAccountMetaParams"];
            };
        };
        responses: {
            /** @description Meta deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Meta not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    fetch_profile_url: {
        parameters: {
            query?: {
                withUrl?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile fetching done. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    fetch_tenant_public_info_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile fetching done. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_connection_string_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTokenBody"];
            };
        };
        responses: {
            /** @description Token created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTokenResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_default_user_url: {
        parameters: {
            query?: never;
            header?: {
                /** @description An optional Bearer token. When included, the user will be registered with the provider informed in the token. */
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDefaultUserBody"];
            };
        };
        responses: {
            /** @description User successfully created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    check_email_password_validity_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckUserCredentialsBody"];
            };
        };
        responses: {
            /** @description Credentials are valid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyceliumLoginResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    check_token_and_reset_password_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordBody"];
            };
        };
        responses: {
            /** @description Password change requested. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": boolean;
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    start_password_redefinition_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StartPasswordResetBody"];
            };
        };
        responses: {
            /** @description Password change requested. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": boolean;
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    check_email_registration_status_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This endpoint is deprecated. Please use the /status endpoint instead. */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    totp_check_token_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpUpdatingValidationBody"];
            };
        };
        responses: {
            /** @description Credentials are valid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyceliumLoginResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    totp_disable_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpUpdatingValidationBody"];
            };
        };
        responses: {
            /** @description Credentials are valid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyceliumLoginResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    totp_start_activation_url: {
        parameters: {
            query?: {
                qrCode?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Totp Activation Started. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    totp_finish_activation_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpUpdatingValidationBody"];
            };
        };
        responses: {
            /** @description Credentials are valid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyceliumLoginResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    check_user_token_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckTokenBody"];
            };
        };
        responses: {
            /** @description Activation token is valid. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": boolean;
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_routes_url: {
        parameters: {
            query?: {
                id?: string | null;
                name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Route"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_services_url: {
        parameters: {
            query?: {
                id?: string | null;
                name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_operations_url: {
        parameters: {
            query?: {
                query?: string | null;
                method?: string | null;
                scoreCutoff?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolOperation"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_guest_roles_url: {
        parameters: {
            query?: {
                /** @description The name of the guest role. */
                name?: string | null;
                /** @description The slug of the guest role. */
                slug?: string | null;
                /** @description If it is a system role. */
                system?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    crate_guest_role_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGuestRoleBody"];
            };
        };
        responses: {
            /** @description Guest Role already exists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Guest Role created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_guest_role_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest-role primary key. */
                guest_role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Guest Role deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Guest Role not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_guest_role_name_and_description_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest-role primary key. */
                guest_role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGuestRoleNameAndDescriptionBody"];
            };
        };
        responses: {
            /** @description Guest Role updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Guest Role not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    insert_role_child_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest-role primary key. */
                guest_role_id: string;
                /** @description The child guest-role primary key. */
                child_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGuestRolePermissionsBody"];
            };
        };
        responses: {
            /** @description Guest Role updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Guest Role not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    remove_role_child_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest-role primary key. */
                guest_role_id: string;
                /** @description The child guest-role primary key. */
                child_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGuestRolePermissionsBody"];
            };
        };
        responses: {
            /** @description Guest Role updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Guest Role not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_guest_role_permissions_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest-role primary key. */
                guest_role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGuestRolePermissionsBody"];
            };
        };
        responses: {
            /** @description Guest Role updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Guest Role not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_accounts_by_type_url: {
        parameters: {
            query?: {
                term?: string | null;
                tagValue?: string | null;
                accountType?: null | components["schemas"]["APIAccountType"];
                isOwnerActive?: boolean | null;
                status?: null | components["schemas"]["VerboseStatus"];
                actor?: null | components["schemas"]["SystemActor"];
                skip?: number | null;
                pageSize?: number | null;
            };
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_subscription_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionAccountBody"];
            };
        };
        responses: {
            /** @description Account created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    get_account_details_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_account_name_and_flags_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSubscriptionAccountNameAndFlagsBody"];
            };
        };
        responses: {
            /** @description Account created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    propagate_existing_subscription_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Propagating success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_guest_roles_url: {
        parameters: {
            query?: {
                /** @description The name of the guest role. */
                name?: string | null;
                /** @description The slug of the guest role. */
                slug?: string | null;
                /** @description If it is a system role. */
                system?: boolean | null;
            };
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    fetch_guest_role_details_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The guest role primary key. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_licensed_accounts_of_email_url: {
        parameters: {
            query: {
                /** @description The email which the guest user is connected to */
                email: string;
                /** @description The roles which the guest user was invited to */
                roles?: string[] | null;
                /** @description The permissioned roles which the guest user was invited to */
                permissionedRoles?: [
                    string,
                    "read" | "write"
                ][] | null;
                /** @description The guest user was verified */
                wasVerified?: boolean | null;
            };
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicensedResources"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_guest_on_subscription_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRecord_GuestUser"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    guest_user_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
                /** @description The guest-role unique id. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestUserBody"];
            };
        };
        responses: {
            /** @description Guest already exist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Guesting done. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    uninvite_guest_url: {
        parameters: {
            query: {
                email: string;
            };
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
                /** @description The guest-role unique id. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Guest User uninvited. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Guest User not uninvited. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    register_account_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account unique id. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccountTagBody"];
            };
        };
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_account_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The tag primary key. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAccountTagBody"];
            };
        };
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_account_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The tag primary key. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_error_codes_url: {
        parameters: {
            query?: {
                prefix?: string | null;
                code?: number | null;
                isInternal?: boolean | null;
                skip?: number | null;
                pageSize?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorCode"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    register_error_code_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateErrorCodeBody"];
            };
        };
        responses: {
            /** @description Error code created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorCode"];
                };
            };
            /** @description Error code already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    get_error_code_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The error prefix. */
                prefix: string;
                /** @description The error code. */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorCode"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_error_code_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The error prefix. */
                prefix: string;
                /** @description The error code. */
                code: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Error code deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error code not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_error_code_message_and_details_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The error prefix. */
                prefix: string;
                /** @description The error code. */
                code: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateErrorCodeMessageAndDetailsBody"];
            };
        };
        responses: {
            /** @description Error code updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorCode"];
                };
            };
            /** @description Error code not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_webhooks_url: {
        parameters: {
            query?: {
                name?: string | null;
                trigger?: null | components["schemas"]["WebHookTrigger"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebHook"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    crate_webhook_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWebHookBody"];
            };
        };
        responses: {
            /** @description WebHook already exists. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebHook"];
                };
            };
            /** @description WebHook created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebHook"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_webhook_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook primary key. */
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Webhook not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_webhook_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The webhook primary key. */
                webhook_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWebHookBody"];
            };
        };
        responses: {
            /** @description WebHook created. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebHook"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_subscription_manager_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_subscription_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Account deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    guest_user_to_subscription_manager_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestUserToSubscriptionManagerAccountBody"];
            };
        };
        responses: {
            /** @description Guest already exist. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Guesting done. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestUser"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    revoke_user_guest_to_subscription_manager_account_url: {
        parameters: {
            query: {
                email: string;
            };
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The account primary key. */
                account_id: string;
                /** @description The guest-role unique id. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Guest User uninvited. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Guest User not uninvited. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    register_tenant_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagBody"];
            };
        };
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_tenant_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The tag primary key. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagBody"];
            };
        };
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_tenant_tag_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                /** @description The tag primary key. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    get_tenant_details_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile fetching done. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_management_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_tenant_manager_account_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path: {
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_tenant_meta_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTenantMetaBody"];
            };
        };
        responses: {
            /** @description Meta created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HashMap"];
                };
            };
            /** @description Meta already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_tenant_meta_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteTenantMetaBody"];
            };
        };
        responses: {
            /** @description Meta deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Meta not deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    guest_tenant_owner_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestTenantOwnerBody"];
            };
        };
        responses: {
            /** @description Owner created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantOwnerConnection"];
                };
            };
            /** @description Owner already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    revoke_tenant_owner_url: {
        parameters: {
            query?: never;
            header: {
                /** @description The tenant unique id. */
                "x-mycelium-tenant-id": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestTenantOwnerBody"];
            };
        };
        responses: {
            /** @description Owner deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Owner deleted. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_tenant_name_and_description_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant unique id. */
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTenantNameAndDescriptionBody"];
            };
        };
        responses: {
            /** @description Tenant updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tenant not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_tenant_archiving_status_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant unique id. */
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tenant not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_tenant_trashing_status_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant unique id. */
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tenant not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    update_tenant_verifying_status_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant unique id. */
                tenant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tenant not updated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    activate_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account activated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not activated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    approve_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account approved. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not approved. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    archive_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account activated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not activated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    deactivate_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account activated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not activated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    disapprove_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account disapproved. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not disapproved. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    unarchive_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account activated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not activated. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_system_account_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSystemSubscriptionAccountBody"];
            };
        };
        responses: {
            /** @description Account created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"][];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_system_roles_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Guest roles created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GuestRole"][];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_tenant_url: {
        parameters: {
            query?: {
                /** @description Filter tenants by name */
                name?: string | null;
                /** @description Filter tenants by owner */
                owner?: string | null;
                /** @description Filter tenants by metadata key */
                metadata?: string | null;
                /** @description Filter tenants by tag
                 *
                 *     Example: `key=value` */
                tag?: string | null;
                skip?: number | null;
                pageSize?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tenant"][];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    create_tenant_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTenantBody"];
            };
        };
        responses: {
            /** @description Tenant created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tenant"];
                };
            };
            /** @description Tenant already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    delete_tenant_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant primary key. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant successfully registered. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    exclude_tenant_owner_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant primary key. */
                id: string;
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Owner deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    include_tenant_owner_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tenant primary key. */
                id: string;
                owner_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Owner included. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TenantOwnerConnection"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    downgrade_account_privileges_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DowngradeAccountPrivilegesBody"];
            };
        };
        responses: {
            /** @description Account downgraded. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not downgraded. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    upgrade_account_privileges_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The account primary key. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpgradeAccountPrivilegesBody"];
            };
        };
        responses: {
            /** @description Account upgraded. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Account"];
                };
            };
            /** @description Account not upgraded. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    list_discoverable_services_url: {
        parameters: {
            query?: {
                id?: string | null;
                name?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Fetching success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServicesResponse"];
                };
            };
            /** @description Not found. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
            /** @description Unknown internal server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpJsonResponse"];
                };
            };
        };
    };
    health_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health check passed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    now_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The current datetime with timezone. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
